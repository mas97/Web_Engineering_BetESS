# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  config.vm.define :rabbitmq do |rabbitmq|
    rabbitmq.vm.box = "centos/7"
    rabbitmq.vm.hostname = "rabbitmq"

    rabbitmq.vm.network "private_network", ip: "192.168.33.13"

    rabbitmq.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = false
      vb.name = "rabbitmq"
    
      # Customize the amount of memory on the VM:
      vb.memory = "1024"
    end

    rabbitmq.vm.provision "shell", path: "rabbitmq.sh"
  end

  # config.vm.define :APILAYER do |apilayer|
  #   # The most common configuration options are documented and commented below.
  #   # For a complete reference, please see the online documentation at
  #   # https://docs.vagrantup.com.

  #   # Every Vagrant development environment requires a box. You can search for
  #   # boxes at https://vagrantcloud.com/search.
  #   apilayer.vm.box = "ubuntu/xenial64"
  #   apilayer.vm.hostname = "API-layer"

  #   # Disable automatic box update checking. If you disable this, then
  #   # boxes will only be checked for updates when the user runs
  #   # `vagrant box outdated`. This is not recommended.
  #   # config.vm.box_check_update = false

  #   # Create a forwarded port mapping which allows access to a specific port
  #   # within the machine from a port on the host machine. In the example below,
  #   # accessing "localhost:8080" will access port 80 on the guest machine.
  #   # NOTE: This will enable public access to the opened port
  #   # config.vm.network "forwarded_port", guest: 80, host: 8080

  #   # Create a forwarded port mapping which allows access to a specific port
  #   # within the machine from a port on the host machine and only allow access
  #   # via 127.0.0.1 to disable public access
  #   # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  #   # Create a private network, which allows host-only access to the machine
  #   # using a specific IP.
  #   apilayer.vm.network "private_network", ip: "192.168.33.10"

  #   # Create a public network, which generally matched to bridged network.
  #   # Bridged networks make the machine appear as another physical device on
  #   # your network.
  #   # config.vm.network "public_network"

  #   # Share an additional folder to the guest VM. The first argument is
  #   # the path on the host to the actual folder. The second argument is
  #   # the path on the guest to mount the folder. And the optional third
  #   # argument is a set of non-required options.
  #   # config.vm.synced_folder "../data", "/vagrant_data"
  #   apilayer.vm.synced_folder "../reverse-proxy-shared-files", "/home/vagrant/files"

  #   # Provider-specific configuration so you can fine-tune various
  #   # backing providers for Vagrant. These expose provider-specific options.
  #   # Example for VirtualBox:
  #   #
  #   apilayer.vm.provider "virtualbox" do |vb|
  #     # Display the VirtualBox GUI when booting the machine
  #     vb.gui = false
  #     vb.name = "API-layer machine"
    
  #     # Customize the amount of memory on the VM:
  #     vb.memory = "1024"
  #   end
  #   #
  #   # View the documentation for the provider you are using for more
  #   # information on available options.

  #   # Enable provisioning with a shell script. Additional provisioners such as
  #   # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  #   # documentation for more information about their specific syntax and use.
  #   # config.vm.provision "shell", inline: <<-SHELL
  #   #   apt-get update
  #   #   apt-get install -y apache2
  #   # SHELL
  #   apilayer.vm.provision "shell", path: "API-layer.sh"

  # end

  config.vm.define :auth_service do |auth_service|

    auth_service.vm.box = "ubuntu/xenial64"
    auth_service.vm.hostname = "AUTHservice"

    auth_service.vm.network "private_network", ip: "192.168.33.14"

    auth_service.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = false
      vb.name = "auth-service"
    
      # Customize the amount of memory on the VM:
      vb.memory = "1024"
    end

    auth_service.vm.synced_folder "../auth-service", "/home/vagrant/files"

    auth_service.vm.provision "shell", path: "auth-service-script.sh"

  end

  # config.vm.define :e_t_s_l_service do |e_t_s_l_service|

  #   e_t_s_l_service.vm.box = "ubuntu/xenial64"
  #   e_t_s_l_service.vm.hostname = "ETSLservice"

  #   e_t_s_l_service.vm.network "private_network", ip: "192.168.33.11"

  #   e_t_s_l_service.vm.provider "virtualbox" do |vb|
  #     # Display the VirtualBox GUI when booting the machine
  #     vb.gui = false
  #     vb.name = "e-t-s-l-service"
    
  #     # Customize the amount of memory on the VM:
  #     vb.memory = "1024"
  #   end

  #   e_t_s_l_service.vm.synced_folder "../e-t-s-l-service", "/home/vagrant/files"

  #   e_t_s_l_service.vm.provision "shell", path: "e-t-s-l-service-script.sh"

  # end

  # config.vm.define :u_b_n_service do |u_b_n_service|

  #   u_b_n_service.vm.box = "ubuntu/xenial64"
  #   u_b_n_service.vm.hostname = "UBNservice"

  #   u_b_n_service.vm.network "private_network", ip: "192.168.33.12"

  #   u_b_n_service.vm.provider "virtualbox" do |vb|
  #     # Display the VirtualBox GUI when booting the machine
  #     vb.gui = false
  #     vb.name = "u-b-n-service"
    
  #     # Customize the amount of memory on the VM:
  #     vb.memory = "1024"
  #   end

  #   u_b_n_service.vm.synced_folder "../u-b-n-service", "/home/vagrant/files"

  #   u_b_n_service.vm.provision "shell", path: "u-b-n-service-script.sh"

  # end
end
